@inject UseCases.IGetProductByIdUseCase getProductByIdUseCase
@inject UseCases.ISellProductUseCase sellProductUseCase

@if (productToSell != null)
{
    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Nombre de Producto</label>
            <input class="form-control" id="name" type="text" readonly value="@productToSell.Name" />
        </div>

        <div class="form-group">
            <label for="price">Precio</label>
            <input class="form-control" id="price" type="text" readonly value="@(string.Format("{0:c}", productToSell.Price))" />
        </div>

        <div class="form-group">
            <label for="qty">Cantidad</label>
            <InputNumber  id="qty" @bind-Value="@productToSell.Quantity" class="form-control"></InputNumber>
        </div>

        <button type="submit" class="btn btn-primary">Vender</button>
    </EditForm>
    if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
}



@code {
    private Product productToSell;
    private string errorMessage;

    [Parameter]
    public string CashierName { get; set; }
    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedProduct != null)
        {
            productToSell = new Product
            {
                ProductId = SelectedProduct.ProductId,
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Price = SelectedProduct.Price,
                Quantity = 0
            };
        }
        else
        {
            productToSell = null;
        }

    }

    private void SellProduct()
    {
        if (string.IsNullOrWhiteSpace(CashierName))
        {
            errorMessage = "Falta el nombre de cajero. No se puede realizar la transaccion.";
            return;
        }

        var product = getProductByIdUseCase.Execute(productToSell.ProductId);
        if (productToSell.Quantity <= 0)
        {
            errorMessage = "La cantidad tiene que ser mayor a 0.";
        }
        else if (product.Quantity >= productToSell.Quantity)
        {
            if (string.IsNullOrWhiteSpace(CashierName)) throw new ApplicationException("Falta el nombre de cajero. No se puede realizar la transaccion.");

            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            sellProductUseCase.Execute(CashierName, productToSell.ProductId, productToSell.Quantity.Value);
        }
        else
        {
            errorMessage = $"{product.Name} cuenta con un existente de {product.Quantity}. Ingrese una cantidad a vender acorde.";
        }
    }
}
