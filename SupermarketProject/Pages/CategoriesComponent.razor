@page "/categories"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager navigationManager
@inject UseCases.IViewCategoriesUseCase viewCategoryUseCase
@inject UseCases.IDeleteCategoryUseCase deleteCategoryUseCase

<h3>CRUD Categorias</h3>
<br />
@if (categories != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>@category.Description</td>
                    <td>
                        <button type="button" @onclick="@(() => EditCategory(category))" class="btn btn-link">Edit</button>
                        <button type="button" @onclick="@(() => DeleteCategory(category.CategoryId))" class="btn btn-link">Delete</button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}
<br />
<button type="button" @onclick="OnClickAddCategory" class="btn btn-primary">Agregar categoria</button>


@code {
    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadCategories();
    }

    private void OnClickAddCategory()
    {
        navigationManager.NavigateTo("/addcategory");
    }

    private void EditCategory(Category category)
    {
        navigationManager.NavigateTo($"/editCategory/{category.CategoryId}");
    }

    private void DeleteCategory(int categoryId)
    {
        deleteCategoryUseCase.Delete(categoryId);
        LoadCategories();
    }

    private void LoadCategories()
    {
        categories = viewCategoryUseCase.Execute()?.ToList();
    }
}